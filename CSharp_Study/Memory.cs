//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

////? Stack Memory

///* 스택 메모리는 함수 호출과 관련된 변수, 지역 변수 및 매개 변수를 저장하는데 사용
// * 메모리는 후입 선출(LIFO) 방식으로 작동
// * 메모리 할당과 해제가 매우 빠르며, 스택 포인터를 이용해 데이터에 빠르게 접근
// * 메모리 할당과 해제는 자동. 함수 호출 시 할당, 함수 종료 시 해제
// * 스택 메모리의 크기는 한정. 지정된 최대 크기를 초과 하면
// * 스택 오버플로우(Stack Overflow)가 발생
// */

////  값 형식
////  값 형식 (value type)은 C#과 같은 프로그래밍 언어에서 사용되는 데이터 형식 중 하나
////  변수에 직접 값을 저장, 스택 메모리에 저장
//void MyMethod()
//{
//    int _i = 123;       //  int 할당과 동시에 4byte 할당
//    bool _b = true;     //  bool 할당과 동시에 1byte 할당
//    float _f = 10.5f;
//    char _c = 'A';
//}

///*? 힙 메모리
// * 프로그램 실행 도중 동적으로 메모리를 할당하고 해제하는데 사용
// * 메모리는 동적 할당을 통해 사용자가 직접 관리
// * 메모리 할당과 해제는 명시적으로 프로그래머가 수행
// * 이는 메모리 누수(할당된 메모리를 해제하지 않아서 사용할 수 없게 되는 현상)와 같은 문제를 발생시킬 수 있음
// * (C#은 가비지 컬렉터를 통해 메모리 누수를 방지)
// * 스택 메모리보다 더 큰 메모리를 사용할 수 있음
// * 스택 메모리와 달리 여러 개의 포인터가 동시에 가르킬 수 있으므로, 지유도가 높음
// */

///*?  참조 형식
// *  클래스 (Class) : 객체 지향 프로그래밍에서 가장 기본적인 개념 중 하나인
// *  클래스는 참조 형식 중 가장 일반적인 형식. 객체를 만들기 위한 설계도 역할을 하며, 객체를 생성한 후에는 참조 변수를 사용하여 객체에 접근
// *  인터페이스 (Interface) : 클래스와 비슷하지만, 멤버 변수를 가질 수 없고, 멤버 변수 대신 메서드만 가질 수 있음
// *  배열  (Array) : 동일한 데이터 형식의 변수를 여러 개 저장하는데 사용 
// *  대리자 (Delegate) : 메서드를 참조하는 형식. 이벤트 처리기를 만들 때 사용
// *  객체  (Object) : 모든 클래스의 최상위 클래스. 모든 클래스는 Object 클래스를 상속받음
// *  문자열 (String) : 문자열은 내부적으로 Char 배열을 사용하는 참조 형식
// */

//void NewMethod()
//{
//    var _p1 = new Person() { Name = "김갠지", Age = 31 };     //  Person 클래스의 객체 생성
//    var _p2 = new Person() { Name = "홍길동", Age = 33 };     //  Person 클래스의 객체 생성

//    object _obj = 123;      //  Boxing -> 필요한 경우에만 사용
//}

//class Person
//{
//    public string Name { get; set; } = string.Empty;    //  초기화
//    public int Age { get; set; }
//}